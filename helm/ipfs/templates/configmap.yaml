apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "ipfs.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "ipfs.labels" . | nindent 4 }}
    app.kubernetes.io/component: ipfs
data:
  start_ipfs: |-
    #!/bin/sh
    set -e
    user=ipfs
    repo="$IPFS_PATH"

    if [ `id -u` -eq 0 ]; then
        echo "Changing user to $user"
        # ensure folder is writable
        su-exec "$user" test -w "$repo" || chown -R -- "$user" "$repo"
        # restart script with new privileges
        exec su-exec "$user" "$0" "$@"
    fi

    # 2nd invocation with regular user
    ipfs version

    if [ -e "$repo/config" ]; then
        echo "Found IPFS fs-repo at $repo"
    else
        case "$IPFS_PROFILE" in
            "") INIT_ARGS="" ;;
            *) INIT_ARGS="--profile=$IPFS_PROFILE" ;;
        esac
        ipfs init $INIT_ARGS
        ipfs config Addresses.Gateway /ip4/0.0.0.0/tcp/8080

        # Set up the swarm key, if provided

        SWARM_KEY_FILE="$repo/swarm.key"
        SWARM_KEY_PERM=0400

        # Create a swarm key from a given environment variable
        if [ ! -z "$IPFS_SWARM_KEY" ] ; then
            echo "Copying swarm key from variable..."
            echo -e "$IPFS_SWARM_KEY" >"$SWARM_KEY_FILE" || exit 1
            chmod $SWARM_KEY_PERM "$SWARM_KEY_FILE"
        fi

        # Unset the swarm key variable
        unset IPFS_SWARM_KEY

        # Check during initialization if a swarm key was provided and
        # copy it to the ipfs directory with the right permissions
        # WARNING: This will replace the swarm key if it exists
        if [ ! -z "$IPFS_SWARM_KEY_FILE" ] ; then
            echo "Copying swarm key from file..."
            install -m $SWARM_KEY_PERM "$IPFS_SWARM_KEY_FILE" "$SWARM_KEY_FILE" || exit 1
        fi

        # Unset the swarm key file variable
        unset IPFS_SWARM_KEY_FILE

    fi

    # make the api reachable from outside the pod
    ipfs config Addresses.API /ip4/0.0.0.0/tcp/5001

    if [ ! -z "$(IPFS_ADDRESS_ANNOUNCE_$HOSTNAME)" ] ; then
        ipfs config --json Addresses.Announce "[\"$IPFS_ADDRESS_ANNOUNCE\"]"
    fi

    exec ipfs "$@"
  start_ipfs_cluster: |-
    #!/bin/sh

    set -ex
    user=ipfs

    if [ -n "$DOCKER_DEBUG" ]; then
      set -x
    fi

    if [ `id -u` -eq 0 ]; then
        echo "Changing user to $user"
        # ensure directories are writable
        su-exec "$user" test -w "${IPFS_CLUSTER_PATH}" || chown -R -- "$user" "${IPFS_CLUSTER_PATH}"
        exec su-exec "$user" "$0" $@
    fi

    # Only ipfs user can get here
    ipfs-cluster-service --version

    if [ -e "${IPFS_CLUSTER_PATH}/service.json" ]; then
        echo "Found IPFS cluster configuration at ${IPFS_CLUSTER_PATH}"
    else
        echo "This container only runs ipfs-cluster-service. ipfs needs to be run separately!"
        echo "Initializing default configuration..."
        ipfs-cluster-service init --consensus "${IPFS_CLUSTER_CONSENSUS}" --datastore "${IPFS_CLUSTER_DATASTORE}"
        # configure the bootstrap option for all the nodes except node 0
        if [ "$HOSTNAME" != "{{ include "ipfs.fullname" . }}-0" ]; then
            base_addr=/dns4/{{ include "ipfs.fullname" . }}-0.{{ include "ipfs.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local
            if [ -n "$CLUSTER_RESTAPI_BASICAUTHCREDENTIALS" ]; then
                auth_opts="--basic-auth $CLUSTER_RESTAPI_BASICAUTHCREDENTIALS --force-http"
            fi
            until ipfs-cluster-ctl --host ${base_addr}/tcp/9094 $auth_opts id; do
                echo waiting for ${base_addr}/tcp/9094
                sleep 1
            done
            bootstrap_id=`ipfs-cluster-ctl --host ${base_addr}/tcp/9094 $auth_opts id | head -1 | cut -d ' ' -f1`
            bootstrap="--bootstrap ${base_addr}/tcp/9096/p2p/${bootstrap_id}"
        fi
    fi

    exec ipfs-cluster-service $@ $bootstrap
